/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package myalarmclock;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import javax.swing.Timer;

/**
 *
 * @author ANTONIO
 */
public class Clock extends javax.swing.JFrame implements ActionListener {

    private Timer timer;
    private Audio audio = new Audio();
    private boolean audioIsPlaying = false;
    private boolean alarmEnabled = false;
    Calendar previousTime = captureTime();
    Calendar currentTime;
    Calendar alarmTime = Calendar.getInstance();

    public Clock() {
        initComponents();
        initAlarm();
        initTimer();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        alarmDisplay = new javax.swing.JLabel();
        message = new javax.swing.JLabel();
        timeDisplay = new javax.swing.JLabel();
        dateDisplay = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                formKeyPressed(evt);
            }
        });

        alarmDisplay.setFont(new java.awt.Font("Stencil", 1, 18)); // NOI18N
        alarmDisplay.setText("Alarm Display:");

        message.setFont(new java.awt.Font("Source Code Pro Medium", 1, 14)); // NOI18N
        message.setText("Message Alarm");

        timeDisplay.setFont(new java.awt.Font("Tahoma", 1, 36)); // NOI18N
        timeDisplay.setText("Timer Display");

        dateDisplay.setText("Date Display");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(21, 21, 21)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(message)
                            .addComponent(alarmDisplay))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(timeDisplay, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 390, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addComponent(dateDisplay, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(alarmDisplay)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(message)
                .addGap(63, 63, 63)
                .addComponent(timeDisplay)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(dateDisplay)
                .addContainerGap(119, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void formKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_formKeyPressed

        if (audioIsPlaying) {
            alarmOff();
        } else {
            handleSpecificKey(evt);
        }
    }//GEN-LAST:event_formKeyPressed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Clock.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Clock.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Clock.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Clock.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Clock().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel alarmDisplay;
    private javax.swing.JLabel dateDisplay;
    private javax.swing.JLabel message;
    private javax.swing.JLabel timeDisplay;
    // End of variables declaration//GEN-END:variables

    private Calendar captureTime() {
        Calendar cal = Calendar.getInstance();
        cal.setTimeInMillis(System.currentTimeMillis());
        return cal;
    }

    private void initAlarm() {
        alarmTime.set(Calendar.HOUR_OF_DAY, 0);
        alarmTime.set(Calendar.MINUTE, 0);
        updateAlarmDisplay();
        setAlarmMessage();

    }

    private void initTimer() {
        timer = new Timer(1000, this);
        timer.setDelay(0);
        timer.start();
    }

    @Override
    public void actionPerformed(ActionEvent e) {
        setTime();
        handleTimeChange();
        previousTime = currentTime;
    }

    private void alarmOff() {
        //To change body of generated methods, choose Tools | Templates.
        if (audioIsPlaying) {
            audio.stop();
            audioIsPlaying = false;
            setAlarmMessage();
        }

    }

    private void alarmOn() {
        if (!audioIsPlaying) {
            audio.play();
            audioIsPlaying = true;
            message.setText("Play any key to stop the sound");
        }
    }

    private void toggleAlarmEnaled() {
        if (alarmEnabled) {
            alarmEnabled = false;
        } else {
            alarmEnabled = true;
        }

        setAlarmMessage();
    }

    private void handleSpecificKey(KeyEvent evt) {
        //To change body of generated methods, choose Tools | Templates.
        switch (evt.getKeyCode()) {
            case KeyEvent.VK_PERIOD: //ponto final
                alarmTime.roll(Calendar.HOUR_OF_DAY, 1);
                break;

            case KeyEvent.VK_COMMA://virgula
                alarmTime.roll(Calendar.HOUR_OF_DAY, -1);
                break;

            case KeyEvent.VK_K: //letra K
                alarmTime.roll(Calendar.MINUTE, 1);
                break;

            case KeyEvent.VK_L://letra L
                alarmTime.roll(Calendar.MINUTE, -1);
                break;

            case KeyEvent.VK_SEMICOLON://ponto e virgula
                alarmTime.roll(Calendar.MINUTE, 10);
                break;

            case KeyEvent.VK_J://Letra J
                alarmTime.roll(Calendar.MINUTE, -10);
                break;

            case KeyEvent.VK_SLASH: //Barra
                alarmTime.roll(Calendar.HOUR_OF_DAY, 12);
                break;

            case KeyEvent.VK_M:
                alarmTime.roll(Calendar.HOUR_OF_DAY, 0);
                break;

            case KeyEvent.VK_SPACE:
                toggleAlarmeEnabled();
                break;
        }
        updateAlarmDisplay();
    }

    private void setTime() {
        DateFormat df = new SimpleDateFormat("dd/MM/yyyy");
        DateFormat tf = new SimpleDateFormat("HH:mm:ss");
        currentTime = captureTime();
        timeDisplay.setText(tf.format(currentTime.getTime()));
        dateDisplay.setText(df.format(currentTime.getTime()));
    }

    private void handleTimeChange() {
        //To change body of generated methods, choose Tools | Templates.
      if(timeIsChanging()){
          handleAlarmMatch();
      }
    }

    private boolean timeIsChanging() {
        return !(timesMatch(previousTime, currentTime));
    }

    private void updateAlarmDisplay() {
        alarmDisplay.setText(String.format("%tR", alarmTime));
    }

    private void setAlarmMessage() {
        if (alarmEnabled) {
            message.setText("Alarm enabled. Press space to disable");
        } else {
            message.setText("Alarm disabled. Press space to enable");
        }
    }

    private boolean timesMatch(Calendar timeA, Calendar timeB) {
        //To change body of generated methods, choose Tools | Templates.
        return ((timeA.get(Calendar.HOUR_OF_DAY) == timeB.get(Calendar.HOUR_OF_DAY))
                && (timeA.get(Calendar.MINUTE) == timeB.get(Calendar.MINUTE)));
    }

    private void toggleAlarmeEnabled() {
        //To change body of generated methods, choose Tools | Templates.
        if(alarmEnabled){
            alarmEnabled = false;
        }else{
            alarmEnabled = true;
        }
        
        setAlarmMessage();
    }

    private void handleAlarmMatch() {
         //To change body of generated methods, choose Tools | Templates.
         if (alarmEnabled && alarmMatching()) {
            alarmOn();
        }
    }

    private boolean alarmMatching() {
         //To change body of generated methods, choose Tools | Templates.
          return timesMatch(currentTime, alarmTime);
    }
}
